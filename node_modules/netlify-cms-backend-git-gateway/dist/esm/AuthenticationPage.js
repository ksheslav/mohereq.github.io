"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _partial2 = _interopRequireDefault(require("lodash/partial"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _react = _interopRequireDefault(require("react"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _core = require("@emotion/core");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _EMOTION_STRINGIFIED_CSS_ERROR__() { return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop)."; }

const LoginButton = (0, _styledBase.default)("button", {
  target: "ey01qwa0",
  label: "LoginButton"
})(_netlifyCmsUiDefault.buttons.button, ";", _netlifyCmsUiDefault.shadows.dropDeep, ";", _netlifyCmsUiDefault.buttons.default, ";", _netlifyCmsUiDefault.buttons.gray, ";padding:0 30px;display:block;margin-top:20px;margin-left:auto;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdXRoZW50aWNhdGlvblBhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBY2lDIiwiZmlsZSI6Ii4uLy4uL3NyYy9BdXRoZW50aWNhdGlvblBhZ2UuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IEltbXV0YWJsZVByb3BUeXBlcyBmcm9tICdyZWFjdC1pbW11dGFibGUtcHJvcHR5cGVzJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ0BlbW90aW9uL3N0eWxlZCc7XG5pbXBvcnQgeyBwYXJ0aWFsIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7XG4gIEF1dGhlbnRpY2F0aW9uUGFnZSxcbiAgYnV0dG9ucyxcbiAgc2hhZG93cyxcbiAgY29sb3JzLFxuICBjb2xvcnNSYXcsXG4gIGxlbmd0aHMsXG59IGZyb20gJ25ldGxpZnktY21zLXVpLWRlZmF1bHQnO1xuXG5jb25zdCBMb2dpbkJ1dHRvbiA9IHN0eWxlZC5idXR0b25gXG4gICR7YnV0dG9ucy5idXR0b259O1xuICAke3NoYWRvd3MuZHJvcERlZXB9O1xuICAke2J1dHRvbnMuZGVmYXVsdH07XG4gICR7YnV0dG9ucy5ncmF5fTtcblxuICBwYWRkaW5nOiAwIDMwcHg7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBtYXJnaW4tdG9wOiAyMHB4O1xuICBtYXJnaW4tbGVmdDogYXV0bztcbmA7XG5cbmNvbnN0IEF1dGhGb3JtID0gc3R5bGVkLmZvcm1gXG4gIHdpZHRoOiAzNTBweDtcbiAgbWFyZ2luLXRvcDogLTgwcHg7XG5gO1xuXG5jb25zdCBBdXRoSW5wdXQgPSBzdHlsZWQuaW5wdXRgXG4gIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzUmF3LndoaXRlfTtcbiAgYm9yZGVyLXJhZGl1czogJHtsZW5ndGhzLmJvcmRlclJhZGl1c307XG5cbiAgZm9udC1zaXplOiAxNHB4O1xuICBwYWRkaW5nOiAxMHB4IDEwcHg7XG4gIG1hcmdpbi1ib3R0b206IDE1cHg7XG4gIG1hcmdpbi10b3A6IDZweDtcbiAgd2lkdGg6IDEwMCU7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgei1pbmRleDogMTtcblxuICAmOmZvY3VzIHtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIGJveC1zaGFkb3c6IGluc2V0IDAgMCAwIDJweCAke2NvbG9ycy5hY3RpdmV9O1xuICB9XG5gO1xuXG5jb25zdCBFcnJvck1lc3NhZ2UgPSBzdHlsZWQucGBcbiAgY29sb3I6ICR7Y29sb3JzLmVycm9yVGV4dH07XG5gO1xuXG5sZXQgY29tcG9uZW50ID0gbnVsbDtcblxuaWYgKHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkpIHtcbiAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vbignbG9naW4nLCB1c2VyID0+IHtcbiAgICBjb21wb25lbnQgJiYgY29tcG9uZW50LmhhbmRsZUlkZW50aXR5TG9naW4odXNlcik7XG4gIH0pO1xuICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9uKCdsb2dvdXQnLCAoKSA9PiB7XG4gICAgY29tcG9uZW50ICYmIGNvbXBvbmVudC5oYW5kbGVJZGVudGl0eUxvZ291dCgpO1xuICB9KTtcbiAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vbignZXJyb3InLCBlcnIgPT4ge1xuICAgIGNvbXBvbmVudCAmJiBjb21wb25lbnQuaGFuZGxlSWRlbnRpdHlFcnJvcihlcnIpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR2l0R2F0ZXdheUF1dGhlbnRpY2F0aW9uUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIGNvbXBvbmVudCA9IHRoaXM7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBpZiAoIXRoaXMubG9nZ2VkSW4gJiYgd2luZG93Lm5ldGxpZnlJZGVudGl0eSAmJiB3aW5kb3cubmV0bGlmeUlkZW50aXR5LmN1cnJlbnRVc2VyKCkpIHtcbiAgICAgIHRoaXMucHJvcHMub25Mb2dpbih3aW5kb3cubmV0bGlmeUlkZW50aXR5LmN1cnJlbnRVc2VyKCkpO1xuICAgICAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGNvbXBvbmVudCA9IG51bGw7XG4gIH1cblxuICBoYW5kbGVJZGVudGl0eUxvZ2luID0gdXNlciA9PiB7XG4gICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgfTtcblxuICBoYW5kbGVJZGVudGl0eUxvZ291dCA9ICgpID0+IHtcbiAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9wZW4oKTtcbiAgfTtcblxuICBoYW5kbGVJZGVudGl0eUVycm9yID0gZXJyID0+IHtcbiAgICBpZiAoZXJyPy5tZXNzYWdlPy5tYXRjaCgvXkZhaWxlZCB0byBsb2FkIHNldHRpbmdzIGZyb20uK1xcLm5ldGxpZnlcXC9pZGVudGl0eSQvKSkge1xuICAgICAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5jbG9zZSgpO1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgIGVycm9yczogeyBpZGVudGl0eTogdGhpcy5wcm9wcy50KCdhdXRoLmVycm9ycy5pZGVudGl0eVNldHRpbmdzJykgfSxcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICBoYW5kbGVJZGVudGl0eSA9ICgpID0+IHtcbiAgICBjb25zdCB1c2VyID0gd2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpO1xuICAgIGlmICh1c2VyKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTG9naW4odXNlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub3BlbigpO1xuICAgIH1cbiAgfTtcblxuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIG9uTG9naW46IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaW5Qcm9ncmVzczogUHJvcFR5cGVzLmJvb2wuaXNSZXF1aXJlZCxcbiAgICBlcnJvcjogUHJvcFR5cGVzLm5vZGUsXG4gICAgY29uZmlnOiBJbW11dGFibGVQcm9wVHlwZXMubWFwLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIH07XG5cbiAgc3RhdGUgPSB7IGVtYWlsOiAnJywgcGFzc3dvcmQ6ICcnLCBlcnJvcnM6IHt9IH07XG5cbiAgaGFuZGxlQ2hhbmdlID0gKG5hbWUsIGUpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgLi4udGhpcy5zdGF0ZSwgW25hbWVdOiBlLnRhcmdldC52YWx1ZSB9KTtcbiAgfTtcblxuICBoYW5kbGVMb2dpbiA9IGUgPT4ge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgIGNvbnN0IHsgZW1haWwsIHBhc3N3b3JkIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgdCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBlcnJvcnMgPSB7fTtcbiAgICBpZiAoIWVtYWlsKSB7XG4gICAgICBlcnJvcnMuZW1haWwgPSB0KCdhdXRoLmVycm9ycy5lbWFpbCcpO1xuICAgIH1cbiAgICBpZiAoIXBhc3N3b3JkKSB7XG4gICAgICBlcnJvcnMucGFzc3dvcmQgPSB0KCdhdXRoLmVycm9ycy5wYXNzd29yZCcpO1xuICAgIH1cblxuICAgIGlmIChPYmplY3Qua2V5cyhlcnJvcnMpLmxlbmd0aCA+IDApIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoeyBlcnJvcnMgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgR2l0R2F0ZXdheUF1dGhlbnRpY2F0aW9uUGFnZS5hdXRoQ2xpZW50XG4gICAgICAubG9naW4odGhpcy5zdGF0ZS5lbWFpbCwgdGhpcy5zdGF0ZS5wYXNzd29yZCwgdHJ1ZSlcbiAgICAgIC50aGVuKHVzZXIgPT4ge1xuICAgICAgICB0aGlzLnByb3BzLm9uTG9naW4odXNlcik7XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgZXJyb3JzOiB7IHNlcnZlcjogZXJyb3IuZGVzY3JpcHRpb24gfHwgZXJyb3IubXNnIHx8IGVycm9yIH0sXG4gICAgICAgICAgbG9nZ2luZ0luOiBmYWxzZSxcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBlcnJvcnMgfSA9IHRoaXMuc3RhdGU7XG4gICAgY29uc3QgeyBlcnJvciwgaW5Qcm9ncmVzcywgY29uZmlnLCB0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgaWYgKHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkpIHtcbiAgICAgIGlmIChlcnJvcnMuaWRlbnRpdHkpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8QXV0aGVudGljYXRpb25QYWdlXG4gICAgICAgICAgICBsb2dvVXJsPXtjb25maWcuZ2V0KCdsb2dvX3VybCcpfVxuICAgICAgICAgICAgb25Mb2dpbj17dGhpcy5oYW5kbGVJZGVudGl0eX1cbiAgICAgICAgICAgIHJlbmRlclBhZ2VDb250ZW50PXsoKSA9PiAoXG4gICAgICAgICAgICAgIDxhXG4gICAgICAgICAgICAgICAgaHJlZj1cImh0dHBzOi8vZG9jcy5uZXRsaWZ5LmNvbS92aXNpdG9yLWFjY2Vzcy9naXQtZ2F0ZXdheS8jc2V0dXAtYW5kLXNldHRpbmdzXCJcbiAgICAgICAgICAgICAgICB0YXJnZXQ9XCJfYmxhbmtcIlxuICAgICAgICAgICAgICAgIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXJcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAge2Vycm9ycy5pZGVudGl0eX1cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgKX1cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8QXV0aGVudGljYXRpb25QYWdlXG4gICAgICAgICAgICBsb2dvVXJsPXtjb25maWcuZ2V0KCdsb2dvX3VybCcpfVxuICAgICAgICAgICAgb25Mb2dpbj17dGhpcy5oYW5kbGVJZGVudGl0eX1cbiAgICAgICAgICAgIHJlbmRlckJ1dHRvbkNvbnRlbnQ9eygpID0+IHQoJ2F1dGgubG9naW5XaXRoTmV0bGlmeUlkZW50aXR5Jyl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgPEF1dGhlbnRpY2F0aW9uUGFnZVxuICAgICAgICBsb2dvVXJsPXtjb25maWcuZ2V0KCdsb2dvX3VybCcpfVxuICAgICAgICBzaXRlVXJsPXtjb25maWcuZ2V0KCdzaXRlX3VybCcpfVxuICAgICAgICByZW5kZXJQYWdlQ29udGVudD17KCkgPT4gKFxuICAgICAgICAgIDxBdXRoRm9ybSBvblN1Ym1pdD17dGhpcy5oYW5kbGVMb2dpbn0+XG4gICAgICAgICAgICB7IWVycm9yID8gbnVsbCA6IDxFcnJvck1lc3NhZ2U+e2Vycm9yfTwvRXJyb3JNZXNzYWdlPn1cbiAgICAgICAgICAgIHshZXJyb3JzLnNlcnZlciA/IG51bGwgOiA8RXJyb3JNZXNzYWdlPntlcnJvcnMuc2VydmVyfTwvRXJyb3JNZXNzYWdlPn1cbiAgICAgICAgICAgIDxFcnJvck1lc3NhZ2U+e2Vycm9ycy5lbWFpbCB8fCBudWxsfTwvRXJyb3JNZXNzYWdlPlxuICAgICAgICAgICAgPEF1dGhJbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJlbWFpbFwiXG4gICAgICAgICAgICAgIHBsYWNlaG9sZGVyPVwiRW1haWxcIlxuICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5lbWFpbH1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3BhcnRpYWwodGhpcy5oYW5kbGVDaGFuZ2UsICdlbWFpbCcpfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxFcnJvck1lc3NhZ2U+e2Vycm9ycy5wYXNzd29yZCB8fCBudWxsfTwvRXJyb3JNZXNzYWdlPlxuICAgICAgICAgICAgPEF1dGhJbnB1dFxuICAgICAgICAgICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICBuYW1lPVwicGFzc3dvcmRcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIlBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUucGFzc3dvcmR9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlQ2hhbmdlLCAncGFzc3dvcmQnKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8TG9naW5CdXR0b24gZGlzYWJsZWQ9e2luUHJvZ3Jlc3N9PlxuICAgICAgICAgICAgICB7aW5Qcm9ncmVzcyA/IHQoJ2F1dGgubG9nZ2luZ0luJykgOiB0KCdhdXRoLmxvZ2luJyl9XG4gICAgICAgICAgICA8L0xvZ2luQnV0dG9uPlxuICAgICAgICAgIDwvQXV0aEZvcm0+XG4gICAgICAgICl9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbn1cbiJdfQ== */"));
const AuthForm = (0, _styledBase.default)("form", {
  target: "ey01qwa1",
  label: "AuthForm"
})(process.env.NODE_ENV === "production" ? {
  name: "olstp8",
  styles: "width:350px;margin-top:-80px;"
} : {
  name: "olstp8",
  styles: "width:350px;margin-top:-80px;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdXRoZW50aWNhdGlvblBhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBMEI0QiIsImZpbGUiOiIuLi8uLi9zcmMvQXV0aGVudGljYXRpb25QYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcGFydGlhbCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge1xuICBBdXRoZW50aWNhdGlvblBhZ2UsXG4gIGJ1dHRvbnMsXG4gIHNoYWRvd3MsXG4gIGNvbG9ycyxcbiAgY29sb3JzUmF3LFxuICBsZW5ndGhzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgTG9naW5CdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke2J1dHRvbnMuZ3JheX07XG5cbiAgcGFkZGluZzogMCAzMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG5gO1xuXG5jb25zdCBBdXRoRm9ybSA9IHN0eWxlZC5mb3JtYFxuICB3aWR0aDogMzUwcHg7XG4gIG1hcmdpbi10b3A6IC04MHB4O1xuYDtcblxuY29uc3QgQXV0aElucHV0ID0gc3R5bGVkLmlucHV0YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgcGFkZGluZzogMTBweCAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICBtYXJnaW4tdG9wOiA2cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDE7XG5cbiAgJjpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAycHggJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgRXJyb3JNZXNzYWdlID0gc3R5bGVkLnBgXG4gIGNvbG9yOiAke2NvbG9ycy5lcnJvclRleHR9O1xuYDtcblxubGV0IGNvbXBvbmVudCA9IG51bGw7XG5cbmlmICh3aW5kb3cubmV0bGlmeUlkZW50aXR5KSB7XG4gIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub24oJ2xvZ2luJywgdXNlciA9PiB7XG4gICAgY29tcG9uZW50ICYmIGNvbXBvbmVudC5oYW5kbGVJZGVudGl0eUxvZ2luKHVzZXIpO1xuICB9KTtcbiAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vbignbG9nb3V0JywgKCkgPT4ge1xuICAgIGNvbXBvbmVudCAmJiBjb21wb25lbnQuaGFuZGxlSWRlbnRpdHlMb2dvdXQoKTtcbiAgfSk7XG4gIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBjb21wb25lbnQgJiYgY29tcG9uZW50LmhhbmRsZUlkZW50aXR5RXJyb3IoZXJyKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdpdEdhdGV3YXlBdXRoZW50aWNhdGlvblBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb21wb25lbnQgPSB0aGlzO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmxvZ2dlZEluICYmIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkgJiYgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTG9naW4od2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKTtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb21wb25lbnQgPSBudWxsO1xuICB9XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dpbiA9IHVzZXIgPT4ge1xuICAgIHRoaXMucHJvcHMub25Mb2dpbih1c2VyKTtcbiAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5LmNsb3NlKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dvdXQgPSAoKSA9PiB7XG4gICAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vcGVuKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlFcnJvciA9IGVyciA9PiB7XG4gICAgaWYgKGVycj8ubWVzc2FnZT8ubWF0Y2goL15GYWlsZWQgdG8gbG9hZCBzZXR0aW5ncyBmcm9tLitcXC5uZXRsaWZ5XFwvaWRlbnRpdHkkLykpIHtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcnM6IHsgaWRlbnRpdHk6IHRoaXMucHJvcHMudCgnYXV0aC5lcnJvcnMuaWRlbnRpdHlTZXR0aW5ncycpIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHkgPSAoKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY3VycmVudFVzZXIoKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkxvZ2luOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGluUHJvZ3Jlc3M6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ub2RlLFxuICAgIGNvbmZpZzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0geyBlbWFpbDogJycsIHBhc3N3b3JkOiAnJywgZXJyb3JzOiB7fSB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9IChuYW1lLCBlKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IC4uLnRoaXMuc3RhdGUsIFtuYW1lXTogZS50YXJnZXQudmFsdWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlTG9naW4gPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZXJyb3JzID0ge307XG4gICAgaWYgKCFlbWFpbCkge1xuICAgICAgZXJyb3JzLmVtYWlsID0gdCgnYXV0aC5lcnJvcnMuZW1haWwnKTtcbiAgICB9XG4gICAgaWYgKCFwYXNzd29yZCkge1xuICAgICAgZXJyb3JzLnBhc3N3b3JkID0gdCgnYXV0aC5lcnJvcnMucGFzc3dvcmQnKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JzIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIEdpdEdhdGV3YXlBdXRoZW50aWNhdGlvblBhZ2UuYXV0aENsaWVudFxuICAgICAgLmxvZ2luKHRoaXMuc3RhdGUuZW1haWwsIHRoaXMuc3RhdGUucGFzc3dvcmQsIHRydWUpXG4gICAgICAudGhlbih1c2VyID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGVycm9yczogeyBzZXJ2ZXI6IGVycm9yLmRlc2NyaXB0aW9uIHx8IGVycm9yLm1zZyB8fCBlcnJvciB9LFxuICAgICAgICAgIGxvZ2dpbmdJbjogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZXJyb3JzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgZXJyb3IsIGluUHJvZ3Jlc3MsIGNvbmZpZywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh3aW5kb3cubmV0bGlmeUlkZW50aXR5KSB7XG4gICAgICBpZiAoZXJyb3JzLmlkZW50aXR5KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEF1dGhlbnRpY2F0aW9uUGFnZVxuICAgICAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgICAgIG9uTG9naW49e3RoaXMuaGFuZGxlSWRlbnRpdHl9XG4gICAgICAgICAgICByZW5kZXJQYWdlQ29udGVudD17KCkgPT4gKFxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RvY3MubmV0bGlmeS5jb20vdmlzaXRvci1hY2Nlc3MvZ2l0LWdhdGV3YXkvI3NldHVwLWFuZC1zZXR0aW5nc1wiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlcnJvcnMuaWRlbnRpdHl9XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEF1dGhlbnRpY2F0aW9uUGFnZVxuICAgICAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgICAgIG9uTG9naW49e3RoaXMuaGFuZGxlSWRlbnRpdHl9XG4gICAgICAgICAgICByZW5kZXJCdXR0b25Db250ZW50PXsoKSA9PiB0KCdhdXRoLmxvZ2luV2l0aE5ldGxpZnlJZGVudGl0eScpfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBdXRoZW50aWNhdGlvblBhZ2VcbiAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgc2l0ZVVybD17Y29uZmlnLmdldCgnc2l0ZV91cmwnKX1cbiAgICAgICAgcmVuZGVyUGFnZUNvbnRlbnQ9eygpID0+IChcbiAgICAgICAgICA8QXV0aEZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlTG9naW59PlxuICAgICAgICAgICAgeyFlcnJvciA/IG51bGwgOiA8RXJyb3JNZXNzYWdlPntlcnJvcn08L0Vycm9yTWVzc2FnZT59XG4gICAgICAgICAgICB7IWVycm9ycy5zZXJ2ZXIgPyBudWxsIDogPEVycm9yTWVzc2FnZT57ZXJyb3JzLnNlcnZlcn08L0Vycm9yTWVzc2FnZT59XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMuZW1haWwgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtYWlsXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlQ2hhbmdlLCAnZW1haWwnKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMucGFzc3dvcmQgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhc3N3b3JkfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17cGFydGlhbCh0aGlzLmhhbmRsZUNoYW5nZSwgJ3Bhc3N3b3JkJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPExvZ2luQnV0dG9uIGRpc2FibGVkPXtpblByb2dyZXNzfT5cbiAgICAgICAgICAgICAge2luUHJvZ3Jlc3MgPyB0KCdhdXRoLmxvZ2dpbmdJbicpIDogdCgnYXV0aC5sb2dpbicpfVxuICAgICAgICAgICAgPC9Mb2dpbkJ1dHRvbj5cbiAgICAgICAgICA8L0F1dGhGb3JtPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iXX0= */",
  toString: _EMOTION_STRINGIFIED_CSS_ERROR__
});
const AuthInput = (0, _styledBase.default)("input", {
  target: "ey01qwa2",
  label: "AuthInput"
})("background-color:", _netlifyCmsUiDefault.colorsRaw.white, ";border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";font-size:14px;padding:10px 10px;margin-bottom:15px;margin-top:6px;width:100%;position:relative;z-index:1;&:focus{outline:none;box-shadow:inset 0 0 0 2px ", _netlifyCmsUiDefault.colors.active, ";}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdXRoZW50aWNhdGlvblBhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBK0I4QiIsImZpbGUiOiIuLi8uLi9zcmMvQXV0aGVudGljYXRpb25QYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcGFydGlhbCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge1xuICBBdXRoZW50aWNhdGlvblBhZ2UsXG4gIGJ1dHRvbnMsXG4gIHNoYWRvd3MsXG4gIGNvbG9ycyxcbiAgY29sb3JzUmF3LFxuICBsZW5ndGhzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgTG9naW5CdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke2J1dHRvbnMuZ3JheX07XG5cbiAgcGFkZGluZzogMCAzMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG5gO1xuXG5jb25zdCBBdXRoRm9ybSA9IHN0eWxlZC5mb3JtYFxuICB3aWR0aDogMzUwcHg7XG4gIG1hcmdpbi10b3A6IC04MHB4O1xuYDtcblxuY29uc3QgQXV0aElucHV0ID0gc3R5bGVkLmlucHV0YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgcGFkZGluZzogMTBweCAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICBtYXJnaW4tdG9wOiA2cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDE7XG5cbiAgJjpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAycHggJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgRXJyb3JNZXNzYWdlID0gc3R5bGVkLnBgXG4gIGNvbG9yOiAke2NvbG9ycy5lcnJvclRleHR9O1xuYDtcblxubGV0IGNvbXBvbmVudCA9IG51bGw7XG5cbmlmICh3aW5kb3cubmV0bGlmeUlkZW50aXR5KSB7XG4gIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub24oJ2xvZ2luJywgdXNlciA9PiB7XG4gICAgY29tcG9uZW50ICYmIGNvbXBvbmVudC5oYW5kbGVJZGVudGl0eUxvZ2luKHVzZXIpO1xuICB9KTtcbiAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vbignbG9nb3V0JywgKCkgPT4ge1xuICAgIGNvbXBvbmVudCAmJiBjb21wb25lbnQuaGFuZGxlSWRlbnRpdHlMb2dvdXQoKTtcbiAgfSk7XG4gIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBjb21wb25lbnQgJiYgY29tcG9uZW50LmhhbmRsZUlkZW50aXR5RXJyb3IoZXJyKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdpdEdhdGV3YXlBdXRoZW50aWNhdGlvblBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb21wb25lbnQgPSB0aGlzO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmxvZ2dlZEluICYmIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkgJiYgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTG9naW4od2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKTtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb21wb25lbnQgPSBudWxsO1xuICB9XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dpbiA9IHVzZXIgPT4ge1xuICAgIHRoaXMucHJvcHMub25Mb2dpbih1c2VyKTtcbiAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5LmNsb3NlKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dvdXQgPSAoKSA9PiB7XG4gICAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vcGVuKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlFcnJvciA9IGVyciA9PiB7XG4gICAgaWYgKGVycj8ubWVzc2FnZT8ubWF0Y2goL15GYWlsZWQgdG8gbG9hZCBzZXR0aW5ncyBmcm9tLitcXC5uZXRsaWZ5XFwvaWRlbnRpdHkkLykpIHtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcnM6IHsgaWRlbnRpdHk6IHRoaXMucHJvcHMudCgnYXV0aC5lcnJvcnMuaWRlbnRpdHlTZXR0aW5ncycpIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHkgPSAoKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY3VycmVudFVzZXIoKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkxvZ2luOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGluUHJvZ3Jlc3M6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ub2RlLFxuICAgIGNvbmZpZzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0geyBlbWFpbDogJycsIHBhc3N3b3JkOiAnJywgZXJyb3JzOiB7fSB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9IChuYW1lLCBlKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IC4uLnRoaXMuc3RhdGUsIFtuYW1lXTogZS50YXJnZXQudmFsdWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlTG9naW4gPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZXJyb3JzID0ge307XG4gICAgaWYgKCFlbWFpbCkge1xuICAgICAgZXJyb3JzLmVtYWlsID0gdCgnYXV0aC5lcnJvcnMuZW1haWwnKTtcbiAgICB9XG4gICAgaWYgKCFwYXNzd29yZCkge1xuICAgICAgZXJyb3JzLnBhc3N3b3JkID0gdCgnYXV0aC5lcnJvcnMucGFzc3dvcmQnKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JzIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIEdpdEdhdGV3YXlBdXRoZW50aWNhdGlvblBhZ2UuYXV0aENsaWVudFxuICAgICAgLmxvZ2luKHRoaXMuc3RhdGUuZW1haWwsIHRoaXMuc3RhdGUucGFzc3dvcmQsIHRydWUpXG4gICAgICAudGhlbih1c2VyID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGVycm9yczogeyBzZXJ2ZXI6IGVycm9yLmRlc2NyaXB0aW9uIHx8IGVycm9yLm1zZyB8fCBlcnJvciB9LFxuICAgICAgICAgIGxvZ2dpbmdJbjogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZXJyb3JzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgZXJyb3IsIGluUHJvZ3Jlc3MsIGNvbmZpZywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh3aW5kb3cubmV0bGlmeUlkZW50aXR5KSB7XG4gICAgICBpZiAoZXJyb3JzLmlkZW50aXR5KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEF1dGhlbnRpY2F0aW9uUGFnZVxuICAgICAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgICAgIG9uTG9naW49e3RoaXMuaGFuZGxlSWRlbnRpdHl9XG4gICAgICAgICAgICByZW5kZXJQYWdlQ29udGVudD17KCkgPT4gKFxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RvY3MubmV0bGlmeS5jb20vdmlzaXRvci1hY2Nlc3MvZ2l0LWdhdGV3YXkvI3NldHVwLWFuZC1zZXR0aW5nc1wiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlcnJvcnMuaWRlbnRpdHl9XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEF1dGhlbnRpY2F0aW9uUGFnZVxuICAgICAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgICAgIG9uTG9naW49e3RoaXMuaGFuZGxlSWRlbnRpdHl9XG4gICAgICAgICAgICByZW5kZXJCdXR0b25Db250ZW50PXsoKSA9PiB0KCdhdXRoLmxvZ2luV2l0aE5ldGxpZnlJZGVudGl0eScpfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBdXRoZW50aWNhdGlvblBhZ2VcbiAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgc2l0ZVVybD17Y29uZmlnLmdldCgnc2l0ZV91cmwnKX1cbiAgICAgICAgcmVuZGVyUGFnZUNvbnRlbnQ9eygpID0+IChcbiAgICAgICAgICA8QXV0aEZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlTG9naW59PlxuICAgICAgICAgICAgeyFlcnJvciA/IG51bGwgOiA8RXJyb3JNZXNzYWdlPntlcnJvcn08L0Vycm9yTWVzc2FnZT59XG4gICAgICAgICAgICB7IWVycm9ycy5zZXJ2ZXIgPyBudWxsIDogPEVycm9yTWVzc2FnZT57ZXJyb3JzLnNlcnZlcn08L0Vycm9yTWVzc2FnZT59XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMuZW1haWwgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtYWlsXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlQ2hhbmdlLCAnZW1haWwnKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMucGFzc3dvcmQgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhc3N3b3JkfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17cGFydGlhbCh0aGlzLmhhbmRsZUNoYW5nZSwgJ3Bhc3N3b3JkJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPExvZ2luQnV0dG9uIGRpc2FibGVkPXtpblByb2dyZXNzfT5cbiAgICAgICAgICAgICAge2luUHJvZ3Jlc3MgPyB0KCdhdXRoLmxvZ2dpbmdJbicpIDogdCgnYXV0aC5sb2dpbicpfVxuICAgICAgICAgICAgPC9Mb2dpbkJ1dHRvbj5cbiAgICAgICAgICA8L0F1dGhGb3JtPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iXX0= */"));
const ErrorMessage = (0, _styledBase.default)("p", {
  target: "ey01qwa3",
  label: "ErrorMessage"
})("color:", _netlifyCmsUiDefault.colors.errorText, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9BdXRoZW50aWNhdGlvblBhZ2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUQ2QiIsImZpbGUiOiIuLi8uLi9zcmMvQXV0aGVudGljYXRpb25QYWdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IHsgcGFydGlhbCB9IGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQge1xuICBBdXRoZW50aWNhdGlvblBhZ2UsXG4gIGJ1dHRvbnMsXG4gIHNoYWRvd3MsXG4gIGNvbG9ycyxcbiAgY29sb3JzUmF3LFxuICBsZW5ndGhzLFxufSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcblxuY29uc3QgTG9naW5CdXR0b24gPSBzdHlsZWQuYnV0dG9uYFxuICAke2J1dHRvbnMuYnV0dG9ufTtcbiAgJHtzaGFkb3dzLmRyb3BEZWVwfTtcbiAgJHtidXR0b25zLmRlZmF1bHR9O1xuICAke2J1dHRvbnMuZ3JheX07XG5cbiAgcGFkZGluZzogMCAzMHB4O1xuICBkaXNwbGF5OiBibG9jaztcbiAgbWFyZ2luLXRvcDogMjBweDtcbiAgbWFyZ2luLWxlZnQ6IGF1dG87XG5gO1xuXG5jb25zdCBBdXRoRm9ybSA9IHN0eWxlZC5mb3JtYFxuICB3aWR0aDogMzUwcHg7XG4gIG1hcmdpbi10b3A6IC04MHB4O1xuYDtcblxuY29uc3QgQXV0aElucHV0ID0gc3R5bGVkLmlucHV0YFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9yc1Jhdy53aGl0ZX07XG4gIGJvcmRlci1yYWRpdXM6ICR7bGVuZ3Rocy5ib3JkZXJSYWRpdXN9O1xuXG4gIGZvbnQtc2l6ZTogMTRweDtcbiAgcGFkZGluZzogMTBweCAxMHB4O1xuICBtYXJnaW4tYm90dG9tOiAxNXB4O1xuICBtYXJnaW4tdG9wOiA2cHg7XG4gIHdpZHRoOiAxMDAlO1xuICBwb3NpdGlvbjogcmVsYXRpdmU7XG4gIHotaW5kZXg6IDE7XG5cbiAgJjpmb2N1cyB7XG4gICAgb3V0bGluZTogbm9uZTtcbiAgICBib3gtc2hhZG93OiBpbnNldCAwIDAgMCAycHggJHtjb2xvcnMuYWN0aXZlfTtcbiAgfVxuYDtcblxuY29uc3QgRXJyb3JNZXNzYWdlID0gc3R5bGVkLnBgXG4gIGNvbG9yOiAke2NvbG9ycy5lcnJvclRleHR9O1xuYDtcblxubGV0IGNvbXBvbmVudCA9IG51bGw7XG5cbmlmICh3aW5kb3cubmV0bGlmeUlkZW50aXR5KSB7XG4gIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub24oJ2xvZ2luJywgdXNlciA9PiB7XG4gICAgY29tcG9uZW50ICYmIGNvbXBvbmVudC5oYW5kbGVJZGVudGl0eUxvZ2luKHVzZXIpO1xuICB9KTtcbiAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vbignbG9nb3V0JywgKCkgPT4ge1xuICAgIGNvbXBvbmVudCAmJiBjb21wb25lbnQuaGFuZGxlSWRlbnRpdHlMb2dvdXQoKTtcbiAgfSk7XG4gIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkub24oJ2Vycm9yJywgZXJyID0+IHtcbiAgICBjb21wb25lbnQgJiYgY29tcG9uZW50LmhhbmRsZUlkZW50aXR5RXJyb3IoZXJyKTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdpdEdhdGV3YXlBdXRoZW50aWNhdGlvblBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb21wb25lbnQgPSB0aGlzO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmxvZ2dlZEluICYmIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkgJiYgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKSB7XG4gICAgICB0aGlzLnByb3BzLm9uTG9naW4od2luZG93Lm5ldGxpZnlJZGVudGl0eS5jdXJyZW50VXNlcigpKTtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBjb21wb25lbnQgPSBudWxsO1xuICB9XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dpbiA9IHVzZXIgPT4ge1xuICAgIHRoaXMucHJvcHMub25Mb2dpbih1c2VyKTtcbiAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5LmNsb3NlKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlMb2dvdXQgPSAoKSA9PiB7XG4gICAgd2luZG93Lm5ldGxpZnlJZGVudGl0eS5vcGVuKCk7XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHlFcnJvciA9IGVyciA9PiB7XG4gICAgaWYgKGVycj8ubWVzc2FnZT8ubWF0Y2goL15GYWlsZWQgdG8gbG9hZCBzZXR0aW5ncyBmcm9tLitcXC5uZXRsaWZ5XFwvaWRlbnRpdHkkLykpIHtcbiAgICAgIHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY2xvc2UoKTtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBlcnJvcnM6IHsgaWRlbnRpdHk6IHRoaXMucHJvcHMudCgnYXV0aC5lcnJvcnMuaWRlbnRpdHlTZXR0aW5ncycpIH0sXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgaGFuZGxlSWRlbnRpdHkgPSAoKSA9PiB7XG4gICAgY29uc3QgdXNlciA9IHdpbmRvdy5uZXRsaWZ5SWRlbnRpdHkuY3VycmVudFVzZXIoKTtcbiAgICBpZiAodXNlcikge1xuICAgICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cubmV0bGlmeUlkZW50aXR5Lm9wZW4oKTtcbiAgICB9XG4gIH07XG5cbiAgc3RhdGljIHByb3BUeXBlcyA9IHtcbiAgICBvbkxvZ2luOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGluUHJvZ3Jlc3M6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ub2RlLFxuICAgIGNvbmZpZzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgICB0OiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICB9O1xuXG4gIHN0YXRlID0geyBlbWFpbDogJycsIHBhc3N3b3JkOiAnJywgZXJyb3JzOiB7fSB9O1xuXG4gIGhhbmRsZUNoYW5nZSA9IChuYW1lLCBlKSA9PiB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IC4uLnRoaXMuc3RhdGUsIFtuYW1lXTogZS50YXJnZXQudmFsdWUgfSk7XG4gIH07XG5cbiAgaGFuZGxlTG9naW4gPSBlID0+IHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICBjb25zdCB7IGVtYWlsLCBwYXNzd29yZCB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB7IHQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgZXJyb3JzID0ge307XG4gICAgaWYgKCFlbWFpbCkge1xuICAgICAgZXJyb3JzLmVtYWlsID0gdCgnYXV0aC5lcnJvcnMuZW1haWwnKTtcbiAgICB9XG4gICAgaWYgKCFwYXNzd29yZCkge1xuICAgICAgZXJyb3JzLnBhc3N3b3JkID0gdCgnYXV0aC5lcnJvcnMucGFzc3dvcmQnKTtcbiAgICB9XG5cbiAgICBpZiAoT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgZXJyb3JzIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIEdpdEdhdGV3YXlBdXRoZW50aWNhdGlvblBhZ2UuYXV0aENsaWVudFxuICAgICAgLmxvZ2luKHRoaXMuc3RhdGUuZW1haWwsIHRoaXMuc3RhdGUucGFzc3dvcmQsIHRydWUpXG4gICAgICAudGhlbih1c2VyID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5vbkxvZ2luKHVzZXIpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaChlcnJvciA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgIGVycm9yczogeyBzZXJ2ZXI6IGVycm9yLmRlc2NyaXB0aW9uIHx8IGVycm9yLm1zZyB8fCBlcnJvciB9LFxuICAgICAgICAgIGxvZ2dpbmdJbjogZmFsc2UsXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgZXJyb3JzIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHsgZXJyb3IsIGluUHJvZ3Jlc3MsIGNvbmZpZywgdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICh3aW5kb3cubmV0bGlmeUlkZW50aXR5KSB7XG4gICAgICBpZiAoZXJyb3JzLmlkZW50aXR5KSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEF1dGhlbnRpY2F0aW9uUGFnZVxuICAgICAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgICAgIG9uTG9naW49e3RoaXMuaGFuZGxlSWRlbnRpdHl9XG4gICAgICAgICAgICByZW5kZXJQYWdlQ29udGVudD17KCkgPT4gKFxuICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIGhyZWY9XCJodHRwczovL2RvY3MubmV0bGlmeS5jb20vdmlzaXRvci1hY2Nlc3MvZ2l0LWdhdGV3YXkvI3NldHVwLWFuZC1zZXR0aW5nc1wiXG4gICAgICAgICAgICAgICAgdGFyZ2V0PVwiX2JsYW5rXCJcbiAgICAgICAgICAgICAgICByZWw9XCJub29wZW5lciBub3JlZmVycmVyXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHtlcnJvcnMuaWRlbnRpdHl9XG4gICAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICl9XG4gICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgPEF1dGhlbnRpY2F0aW9uUGFnZVxuICAgICAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgICAgIG9uTG9naW49e3RoaXMuaGFuZGxlSWRlbnRpdHl9XG4gICAgICAgICAgICByZW5kZXJCdXR0b25Db250ZW50PXsoKSA9PiB0KCdhdXRoLmxvZ2luV2l0aE5ldGxpZnlJZGVudGl0eScpfVxuICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxBdXRoZW50aWNhdGlvblBhZ2VcbiAgICAgICAgbG9nb1VybD17Y29uZmlnLmdldCgnbG9nb191cmwnKX1cbiAgICAgICAgc2l0ZVVybD17Y29uZmlnLmdldCgnc2l0ZV91cmwnKX1cbiAgICAgICAgcmVuZGVyUGFnZUNvbnRlbnQ9eygpID0+IChcbiAgICAgICAgICA8QXV0aEZvcm0gb25TdWJtaXQ9e3RoaXMuaGFuZGxlTG9naW59PlxuICAgICAgICAgICAgeyFlcnJvciA/IG51bGwgOiA8RXJyb3JNZXNzYWdlPntlcnJvcn08L0Vycm9yTWVzc2FnZT59XG4gICAgICAgICAgICB7IWVycm9ycy5zZXJ2ZXIgPyBudWxsIDogPEVycm9yTWVzc2FnZT57ZXJyb3JzLnNlcnZlcn08L0Vycm9yTWVzc2FnZT59XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMuZW1haWwgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInRleHRcIlxuICAgICAgICAgICAgICBuYW1lPVwiZW1haWxcIlxuICAgICAgICAgICAgICBwbGFjZWhvbGRlcj1cIkVtYWlsXCJcbiAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuZW1haWx9XG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXtwYXJ0aWFsKHRoaXMuaGFuZGxlQ2hhbmdlLCAnZW1haWwnKX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8RXJyb3JNZXNzYWdlPntlcnJvcnMucGFzc3dvcmQgfHwgbnVsbH08L0Vycm9yTWVzc2FnZT5cbiAgICAgICAgICAgIDxBdXRoSW5wdXRcbiAgICAgICAgICAgICAgdHlwZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgbmFtZT1cInBhc3N3b3JkXCJcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJQYXNzd29yZFwiXG4gICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLnBhc3N3b3JkfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17cGFydGlhbCh0aGlzLmhhbmRsZUNoYW5nZSwgJ3Bhc3N3b3JkJyl9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPExvZ2luQnV0dG9uIGRpc2FibGVkPXtpblByb2dyZXNzfT5cbiAgICAgICAgICAgICAge2luUHJvZ3Jlc3MgPyB0KCdhdXRoLmxvZ2dpbmdJbicpIDogdCgnYXV0aC5sb2dpbicpfVxuICAgICAgICAgICAgPC9Mb2dpbkJ1dHRvbj5cbiAgICAgICAgICA8L0F1dGhGb3JtPlxuICAgICAgICApfVxuICAgICAgLz5cbiAgICApO1xuICB9XG59XG4iXX0= */"));
let component = null;

if (window.netlifyIdentity) {
  window.netlifyIdentity.on('login', user => {
    component && component.handleIdentityLogin(user);
  });
  window.netlifyIdentity.on('logout', () => {
    component && component.handleIdentityLogout();
  });
  window.netlifyIdentity.on('error', err => {
    component && component.handleIdentityError(err);
  });
}

class GitGatewayAuthenticationPage extends _react.default.Component {
  constructor(props) {
    super(props);

    _defineProperty(this, "handleIdentityLogin", user => {
      this.props.onLogin(user);
      window.netlifyIdentity.close();
    });

    _defineProperty(this, "handleIdentityLogout", () => {
      window.netlifyIdentity.open();
    });

    _defineProperty(this, "handleIdentityError", err => {
      var _err$message;

      if (err === null || err === void 0 ? void 0 : (_err$message = err.message) === null || _err$message === void 0 ? void 0 : _err$message.match(/^Failed to load settings from.+\.netlify\/identity$/)) {
        window.netlifyIdentity.close();
        this.setState({
          errors: {
            identity: this.props.t('auth.errors.identitySettings')
          }
        });
      }
    });

    _defineProperty(this, "handleIdentity", () => {
      const user = window.netlifyIdentity.currentUser();

      if (user) {
        this.props.onLogin(user);
      } else {
        window.netlifyIdentity.open();
      }
    });

    _defineProperty(this, "state", {
      email: '',
      password: '',
      errors: {}
    });

    _defineProperty(this, "handleChange", (name, e) => {
      this.setState(_objectSpread({}, this.state, {
        [name]: e.target.value
      }));
    });

    _defineProperty(this, "handleLogin", e => {
      e.preventDefault();
      const {
        email,
        password
      } = this.state;
      const {
        t
      } = this.props;
      const errors = {};

      if (!email) {
        errors.email = t('auth.errors.email');
      }

      if (!password) {
        errors.password = t('auth.errors.password');
      }

      if (Object.keys(errors).length > 0) {
        this.setState({
          errors
        });
        return;
      }

      GitGatewayAuthenticationPage.authClient.login(this.state.email, this.state.password, true).then(user => {
        this.props.onLogin(user);
      }).catch(error => {
        this.setState({
          errors: {
            server: error.description || error.msg || error
          },
          loggingIn: false
        });
      });
    });

    component = this;
  }

  componentDidMount() {
    if (!this.loggedIn && window.netlifyIdentity && window.netlifyIdentity.currentUser()) {
      this.props.onLogin(window.netlifyIdentity.currentUser());
      window.netlifyIdentity.close();
    }
  }

  componentWillUnmount() {
    component = null;
  }

  render() {
    const {
      errors
    } = this.state;
    const {
      error,
      inProgress,
      config,
      t
    } = this.props;

    if (window.netlifyIdentity) {
      if (errors.identity) {
        return (0, _core.jsx)(_netlifyCmsUiDefault.AuthenticationPage, {
          logoUrl: config.get('logo_url'),
          onLogin: this.handleIdentity,
          renderPageContent: () => (0, _core.jsx)("a", {
            href: "https://docs.netlify.com/visitor-access/git-gateway/#setup-and-settings",
            target: "_blank",
            rel: "noopener noreferrer"
          }, errors.identity)
        });
      } else {
        return (0, _core.jsx)(_netlifyCmsUiDefault.AuthenticationPage, {
          logoUrl: config.get('logo_url'),
          onLogin: this.handleIdentity,
          renderButtonContent: () => t('auth.loginWithNetlifyIdentity')
        });
      }
    }

    return (0, _core.jsx)(_netlifyCmsUiDefault.AuthenticationPage, {
      logoUrl: config.get('logo_url'),
      siteUrl: config.get('site_url'),
      renderPageContent: () => (0, _core.jsx)(AuthForm, {
        onSubmit: this.handleLogin
      }, !error ? null : (0, _core.jsx)(ErrorMessage, null, error), !errors.server ? null : (0, _core.jsx)(ErrorMessage, null, errors.server), (0, _core.jsx)(ErrorMessage, null, errors.email || null), (0, _core.jsx)(AuthInput, {
        type: "text",
        name: "email",
        placeholder: "Email",
        value: this.state.email,
        onChange: (0, _partial2.default)(this.handleChange, 'email')
      }), (0, _core.jsx)(ErrorMessage, null, errors.password || null), (0, _core.jsx)(AuthInput, {
        type: "password",
        name: "password",
        placeholder: "Password",
        value: this.state.password,
        onChange: (0, _partial2.default)(this.handleChange, 'password')
      }), (0, _core.jsx)(LoginButton, {
        disabled: inProgress
      }, inProgress ? t('auth.loggingIn') : t('auth.login')))
    });
  }

}

exports.default = GitGatewayAuthenticationPage;

_defineProperty(GitGatewayAuthenticationPage, "propTypes", {
  onLogin: _propTypes.default.func.isRequired,
  inProgress: _propTypes.default.bool.isRequired,
  error: _propTypes.default.node,
  config: _reactImmutableProptypes.default.map,
  t: _propTypes.default.func.isRequired
});